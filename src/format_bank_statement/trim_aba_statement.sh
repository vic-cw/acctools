#! /bin/bash

SCRIPT_NAME=$(basename "$0")

USAGE_MESSAGE=$(cat <<EOF

Usage:  $SCRIPT_NAME [-h] <input_file>

        Filter data in csv file <input_file> to keep only
        transaction list, remove everything else, and print
        result to standard output.

        Accepts only csv files generated by Advanced Bank of
        Asia.

        If <input_file> is not of the expected format, output
        can still contain parts of the file, and even the whole
        file.

Options:
        -h  Display this help message

Exit code:
        0   if everything goes well
        1   if file does not fit expected format

EXAMPLE:
        $SCRIPT_NAME downloaded_file.csv >trimmed_file.csv


Project home page : https://github.com/vic-cw/acctools
_
EOF
)

shopt -s xpg_echo

# Check for call of help

while getopts "h" opt; do
	case $opt in
		h)
			echo "$USAGE_MESSAGE" >&2
			exit 0
			;;
		\?)
			echo "$USAGE_MESSAGE" >&2
			exit 1
			;;
	esac
done


# Read argument

if [ $# -lt 1 ]; then
	echo "$USAGE_MESSAGE" >&2
	exit 1
fi

FILE="$1"


# Set up

START_CUT_OFF=false
END_CUT_OFF=false

DATE_REGEX="[0-9][0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9]"
AMOUNT_REGEX="([0-9]|[0-9][0-9]|[0-9][0-9][0-9])( [0-9][0-9][0-9])*.[0-9][0-9]"
OPENING_BALANCE_LINE_REGEX="^$DATE_REGEX;;Opening balance;0.00;$DATE_REGEX;$AMOUNT_REGEX"
CLOSING_BALANCE_LINE_REGEX="^$DATE_REGEX;;Closing balance;0.00;$DATE_REGEX;$AMOUNT_REGEX"


# Parse file

while read line || [ -n "$line" ]; do

	# Do not output until Opening balance line has been met

	if ! "$START_CUT_OFF" ; then
		if [[ "$line" =~ $OPENING_BALANCE_LINE_REGEX ]]; then
			START_CUT_OFF=true
		fi
	else

		# If Opening balance line has been met, but not closing balance, output

		if [[ ! "$line" =~ $CLOSING_BALANCE_LINE_REGEX ]]; then
			echo "$line"

		# If closing balance line has been met, stop outputing

		else
			END_CUT_OFF=true
			break
		fi
	fi
done <"$FILE"

if ! "$START_CUT_OFF" || ! "$END_CUT_OFF" ; then
	echo "Error: wrong file format of file '$FILE'" >&2 
	exit 1
fi
